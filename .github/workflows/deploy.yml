name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, pdo, xml, sqlite
          ini-values: post_max_size=256M, memory_limit=2G

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            ~/.cache/composer
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Check for package.json
        id: check_node
        run: |
          if [ -f package.json ]; then
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi

      - name: Cache node modules (only if package.json exists)
        if: ${{ steps.check_node.outputs.present == 'true' }}
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install node modules (if present)
        if: ${{ steps.check_node.outputs.present == 'true' }}
        run: npm ci

      - name: Prepare .env and SQLite (for CI)
        run: |
          cp .env.example .env || true
          mkdir -p database
          touch database/database.sqlite
          echo "APP_ENV=production" >> .env || true
          echo "APP_DEBUG=false" >> .env || true
          echo "APP_URL=http://127.0.0.1:8000" >> .env || true
          php -r "\$env = file_get_contents('.env'); if (\$env === false) exit(0); \$env = preg_replace('/^DB_CONNECTION=.*$/m', 'DB_CONNECTION=sqlite', \$env); \$env = preg_replace('/^DB_DATABASE=.*$/m', 'DB_DATABASE=' . getenv('GITHUB_WORKSPACE') . '/database/database.sqlite', \$env); file_put_contents('.env', \$env);"
          php artisan key:generate --force || true
          php artisan migrate --force || true

      - name: Build static site (start server + export to dist/)
        env:
          APP_ENV: production
        run: |
          # ensure no BOM/CRLF + executable bit, then run under bash
          # dos2unix might not be installed in all runners; ignore failure safely
          dos2unix scripts/build-static.sh 2>/dev/null || true
          # remove stray leading bytes (e.g. accidental 'e' before shebang) if present
          # this is a safe idempotent no-op if file is already correct
          head -n 1 scripts/build-static.sh | grep -q '^#!' || (sed -i '1s/^[[:space:]]*[^#]\+#!/#!/' scripts/build-static.sh || true)
          chmod +x scripts/build-static.sh
          # run with bash explicitly (Actions default shell may be sh)
          bash scripts/build-static.sh
        shell: bash

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: dist
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
