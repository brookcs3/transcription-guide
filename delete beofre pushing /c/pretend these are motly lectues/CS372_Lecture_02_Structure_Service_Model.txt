In this lecture,Êwe are going to cover the important aspects of computernetworking, specifically focusing on protocols, service models, andnetwork structure. Ê As we progress through the course, we will bedelving deeper into these topics.Let's start with the very important word that will be used frequentlythroughout this course - "protocol". What is a protocol, actually? Aprotocol is essentially a set of rules or guidelines that dictate howentities should interact or communicate with each other. The entities canbe humans or machines. In human communication, there are social protocolsor conventions that dictate how people interact with each other. Theseinclude norms for greetings, conversation etiquette, and behavior invarious social situations.Now in the context of networking, protocols essentially define thestructure, format, and order of messages exchanged between networkentities. This includes specifying how data is organized, what each partof a message represents, and the sequence in which information istransmitted. Protocols also outline the actions to be taken when messagesare transmitted and received. This involves defining how devices shouldbehave during the initiation, transmission, acknowledgment, and receptionof messages.Now, this example beautifully illustrates the concept of protocols inhuman interactions and draws a clear parallel to networking protocols.When you meet a person, you initiate communication by offering agreeting. Then you wait for a response, signaling a readiness to engagein conversation. A typical response is a returned "Hi" message,establishing a positive interaction, this is interpreted by the otherperson as an indication to proceed with the main request (which is askingfor the time). And yes, the first person will adjust actions based on thereceived response. For example, refraining from asking for the time ifthe initial response is negative.Now, a network protocol is likened to a human protocol, but the entitiesinvolved are hardware or software components of a computer network. Thisexample provides a clear illustration of a computer network protocol ofmaking a request to a WWW (World Wide Web) server. Now to Make a Requestto a WWW Server:Your computer initiates communication with the WWW server by sending a"connection request" message. The WWW then server responds with a"connection reply" message, acknowledging the connection request. Now,your computer, having received the acknowledgment, sends a "get" messagespecifying the WWW page it wants to fetch. And finally, The WWW server,in response to the "get" message, returns the contents of the requestedWWW document.So, The Internet and computer networks heavily rely on protocols. TheseProtocols are fundamental for facilitating communication and dataexchange between devices in a network.  There are many many protocolsthat are currently in use. Well, welcome to the fascinating world ofacronyms!ÊNow Let's take another closer look at the network structure, breakingdown the key components and concepts: So, the network edge encompassesthe devices (hosts or end systems) and the software applications thatreside at the periphery of the network. Hosts include end-user devicessuch as computers, smartphones, and servers, while applications generate,consume, or process data. ÊSpecifically, Clients are the Devices (such as computers or smartphones)that request services or resources from servers, and servers in turn arethe Devices that provide services or resources to clients in response torequests.ÊNext, the network core consists of routers that interconnect to form thebackbone of the network. Routers facilitate the transfer of data betweendifferent parts of the network by determining the optimal paths for datapackets. Finally, the Communication Links are Physical pathways thatenable the transmission of data between various devices in a network.Wired links include cables (e.g., fiber optics, copper cables), whilewireless links use technologies like Wi-Fi, Bluetooth, or radio waves.The choice of communication links influences factors such as datatransfer speed, reliability, and the overall performance of the network. Now let's talk about service models. A service model in the context ofcomputer networking refers to how communication and interaction areorganized between different entities or components within a network.We mentioned client-server model previously, which is undoubtedly themost prevalent structure for Internet applications. The Web, e-mail, filetransfer, remote login (e.g., Telnet), and many other popularapplications adopt the client-server model. In this model, the serversare "always on" and ready to respond to client requests.Whereas, In the peer-to-peer service model, communication and servicesare distributed among equal peers, with minimal or no reliance ondedicated servers. Peers both request and provide services to each other.Skype, where users act as both clients and servers, enabling directcommunication. and BitTorrent where peers share parts of files with eachother are popular p2p applications.We have learned so far that end systems in a network exchange messagesvia applications to achieve specific tasks. Additionally, the links,routers, and other components of the Internet serve as the infrastructureto transport these messages between the applications running on endsystems.  Now, let's delve into the characteristics of the communicationservices provided by the network - specifically the Internet. TheInternet offers two types of communication services to its applications:connection-oriented service and connectionless service.ÊIn Connection-Oriented Service, before sending actual data, the clientand server engage in a handshaking procedure, akin to human interactionprotocols, to prepare for data exchange. After handshaking, a looseconnection is established between end systems, maintained by allocatedresources. This service includes reliable data transfer, flow control,and congestion control.ÊTCP (Transmission Control Protocol) is a widelyused connection-oriented protocol.Whereas in connection-less service, data is sent without priorhandshaking, allowing faster delivery. There are no acknowledgments,making it uncertain which packets reach the destination. There are noFlow or Congestion Control features provided. ÊUDP (User DatagramProtocol) provides such connectionless service in the Internet Protocol(IP) suite.TCP is used by familiar Internet applications like Telnet, SMTP, FTP, andHTTP, where reliability and precise control are crucial. While UDP lacksthe reliability and error recovery features of TCP, its simplicity andlow overhead make it well-suited for specific applications wherereal-time communication and low latency are priorities, and whereoccasional data loss can be tolerated. Here are some example applicationsthat use UDP. Okay! Here is the summary of this lecture. Thank you! 